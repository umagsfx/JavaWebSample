import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.SessionId;
import org.openqa.selenium.support.events.EventFiringDecorator;
import org.openqa.selenium.support.events.WebDriverListener;
import java.io.IOException;
import java.lang.reflect.Method;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class DriverManager {
    private static final Duration DEFAULT_IMPLICIT_WAIT = Duration.ofSeconds(30);
    private static final Map<Long, Session> threadSessions = new ConcurrentHashMap<>();
    private static final Map<SessionId, Session> sessionMap = new ConcurrentHashMap<>();
    private static Session lastCreatedSession;
    private static String gridUrl;
    private static final ConfigManager configManager = ConfigManager.getInstance();

    /**
     * Inner Session class to manage driver and session information
     */
    private static class Session {
        private final WebDriver driver;
        private final SessionId sessionId;
        private final String gridUrl;

        public Session(WebDriver driver) {
            this.driver = driver;
            this.sessionId = (driver instanceof RemoteWebDriver) ? 
                ((RemoteWebDriver) driver).getSessionId() : null;
            this.gridUrl = isSupergrid() ? createGridUrl(this.sessionId) : null;
        }

        public WebDriver getDriver() {
            return driver;
        }

        public SessionId getSessionId() {
            return sessionId;
        }

        public String getGridUrl() {
            return gridUrl;
        }
    }

    /* Main session management methods */

    public static WebDriver startWebSession(Method testMethod, 
                                          Map<String, Object> customCapabilities,
                                          boolean chromeExtension, 
                                          String chromeExtensionPath) throws BaseException {
        try {
            ChromeOptions options = getWebCaps(testMethod, customCapabilities);
            WebDriver driver = createWebDriver(options, chromeExtension, chromeExtensionPath);
            driver = decorateWithEventListener(driver);
            
            Duration implicitWait = configManager.getProperty("implicitWaitTime") != null ?
                    Duration.ofSeconds(Long.parseLong(configManager.getProperty("implicitWaitTime"))) :
                    DEFAULT_IMPLICIT_WAIT;
            
            driver.manage().timeouts().implicitlyWait(implicitWait);
            
            return addSession(driver).getDriver();
        } catch (Exception e) {
            throw new BaseException("Failed to start web session", e);
        }
    }

    public static void startViewModelSessionWithDifferentUser(Method method, 
                                                           boolean chromeExtension, 
                                                           String chromeExtensionPath) throws BaseException {
        Map<String, Object> customCaps = new HashMap<>();
        customCaps.put("user", "view_mode_user");
        startWebSession(method, customCaps, chromeExtension, chromeExtensionPath);
    }

    /* Session utility methods */

    public static String getGridUrl() throws BaseException {
        Session session = getSession();
        if (session == null || session.getGridUrl() == null) {
            throw new BaseException("Grid URL not available for current session");
        }
        return session.getGridUrl();
    }

    public static boolean hasSession() {
        return threadSessions.containsKey(Thread.currentThread().getId());
    }

    public static void switchActiveSession(SessionId sessionId) throws BaseException {
        Session session = sessionMap.get(sessionId);
        if (session == null) {
            throw new BaseException("No session found with ID: " + sessionId);
        }
        threadSessions.put(Thread.currentThread().getId(), session);
    }

    private static Session getSession() throws BaseException {
        Session session = threadSessions.get(Thread.currentThread().getId());
        if (session == null) {
            throw new BaseException("No active session for current thread");
        }
        return session;
    }

    private static boolean isSupergrid() {
        return configManager.getProperty("host").contains("supergrid");
    }

    private static Session addSession(WebDriver driver) {
        Session session = new Session(driver);
        threadSessions.put(Thread.currentThread().getId(), session);
        if (session.getSessionId() != null) {
            sessionMap.put(session.getSessionId(), session);
        }
        lastCreatedSession = session;
        return session;
    }

    private static String createGridUrl(SessionId sessionId) {
        return String.format("https://%s/grid/resources?sessionId=%s",
                           configManager.getProperty("host"),
                           sessionId.toString());
    }

    /* Capabilities and driver creation methods */

    private static ChromeOptions getWebCaps(Method testMethod, Map<String, Object> customCapabilities) throws BaseException {
        ChromeOptions options = createChromeOptions();
        
        if (testMethod.isAnnotationPresent(WebTest.class)) {
            WebTest annotation = testMethod.getAnnotation(WebTest.class);
            options.setCapability("version", annotation.browserVersion());
        }
        
        if (customCapabilities != null) {
            addCustomCapabilities(options, customCapabilities);
        }
        
        return options;
    }

    private static void addCustomCapabilities(ChromeOptions options, Map<String, Object> customCapabilities) {
        customCapabilities.forEach(options::setCapability);
    }

    private static ChromeOptions createChromeOptions() {
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--start-maximized");
        options.addArguments("--disable-infobars");
        options.addArguments("--disable-notifications");
        return options;
    }

    private static FirefoxProfile createFirefoxProfile() {
        FirefoxProfile profile = new FirefoxProfile();
        profile.setPreference("browser.download.folderList", 2);
        profile.setPreference("browser.download.manager.showWhenStarting", false);
        profile.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/pdf");
        return profile;
    }

    private static WebDriver createWebDriver(ChromeOptions options, 
                                           boolean chromeExtension, 
                                           String chromeExtensionPath) throws BaseException {
        try {
            if (chromeExtension && chromeExtensionPath != null) {
                options.addExtensions(new File(chromeExtensionPath));
            }
            
            if (isSupergrid()) {
                return new RemoteWebDriver(new URL(gridUrl), options);
            } else {
                return new ChromeDriver(options);
            }
        } catch (Exception e) {
            throw new BaseException("Failed to create WebDriver", e);
        }
    }

    /* Event listener and utility methods */

    private static WebDriver decorateWithEventListener(WebDriver driver) {
        WebDriverListener listener = new WebDriverListener() {
            @Override
            public void beforeGet(WebDriver driver, String url) {
                System.out.println("Navigating to: " + url);
            }
            // Add more listener methods as needed
        };
        return new EventFiringDecorator<>(listener).decorate(driver);
    }

    /* Session cleanup methods */

    public static void kI1Session(boolean quitSession) throws IOException {
        if (lastCreatedSession != null) {
            if (quitSession) {
                quitDriver(lastCreatedSession.getDriver());
            }
            threadSessions.put(Thread.currentThread().getId(), lastCreatedSession);
        }
    }

    public static void kI1AllSessions() throws IOException {
        kI1AllSessions(true);
    }

    public static void kI1AllSessions(boolean quitSession) throws IOException {
        Session session = threadSessions.get(Thread.currentThread().getId());
        if (session != null) {
            if (quitSession) {
                quitDriver(session.getDriver());
            }
            threadSessions.remove(Thread.currentThread().getId());
            if (session.getSessionId() != null) {
                sessionMap.remove(session.getSessionId());
            }
        }
    }

    private static void quitDriver(WebDriver driver) throws IOException {
        try {
            if (driver != null) {
                driver.quit();
            }
        } catch (Exception e) {
            throw new IOException("Failed to quit driver", e);
        }
    }
}
